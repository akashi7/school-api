generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ERole {
  ADMIN
  STUDENT
  PARENT
  SCHOOL
  EMPLOYEE
}

enum EPaymentMethod {
  STRIPE
  MPESA
  SPENN
  MTN
  OTHER
}

enum EAcademicTerm {
  TERM1
  TERM2
  TERM3
}

enum EGender {
  MALE
  FEMALE
}

enum ESchoolType {
  NURSERY
  PRIMARY
  SECONDARY
  TVET
  NURSERY_PRIMARY
  SECONDARY_TVET
  UNIVERSITY
}

enum EFeeType {
  SCHOOL_FEE
  ADDITIONAL_FEE
}

enum EDeductibleType {
  RAMA
  PENSION
  ADDITIONALS
}

enum EpostionsType {
  TEACHER
  DEAN_OF_STUDIES
}

enum EenumurationType {
  SALARY
  WAGES
  COMMISSION
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  deletedAt    DateTime?
  role         ERole     @default(STUDENT)
  refreshToken String?
  active       Boolean   @default(true)
  address      String?

  // SCHOOL ADMIN
  username String?
  password String?

  // STUDENT
  studentIdentifier  String?
  fullName           String?
  email              String?        @unique
  passportPhoto      String?
  dob                DateTime?
  gender             EGender?
  firstContactPhone  String?
  secondContactPhone String?
  academicTerm       EAcademicTerm?
  countryName        String?
  countryCode        String?

  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId String?       @db.ObjectId

  stream   Stream? @relation(fields: [streamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  streamId String? @db.ObjectId

  schoolId String? @db.ObjectId
  school   School? @relation(fields: [schoolId], references: [id])

  parentId String? @db.ObjectId
  parent   User?   @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  studentPromotions StudentPromotion[]
  studentExtraFees  StudentExtraFee[]
  paymentsMade      Payment[]

  // PARENT
  phone    String? @unique
  children User[]  @relation("ParentChildren")

  //EMPLOYEE

  employeeIdentifier    String?
  employeeFullName      String?
  employeePassportPhoto String?
  employeeDob           DateTime?
  employeeGender        EGender?
  employeeCountryName   String?
  employeeCountryCode   String?
  employeeContactPhone  String?
  employeeEmail         String?          @unique
  AccountNumber         Int?
  position              EpostionsType?
  employeeSalary        EmployeeSalary[]
}

model School {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  deletedAt      DateTime?
  schoolName     String?
  schoolTitle    String?
  schoolLogo     String?
  schoolType     ESchoolType?
  hasStudentIds  Boolean?     @default(false)
  countryName    String?
  countryCode    String?
  address        String?
  hasEmployeeIds Boolean?     @default(false)

  fees             Fee[]
  students         User[]
  paymentsReceived Payment[]
  classrooms       Classroom[]
  Deductibles      Deductible[]
}

model Payment {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  deletedAt      DateTime?
  referenceCode  String?
  paymentMethod  EPaymentMethod?
  student        User?           @relation(fields: [studentId], references: [id])
  studentId      String?         @db.ObjectId
  school         School?         @relation(fields: [schoolId], references: [id])
  schoolId       String?         @db.ObjectId
  date           DateTime
  phoneNumber    String?
  amount         Float?
  description    String?
  status         String?         @default("PENDING")
  fee            Fee?            @relation(fields: [feeId], references: [id])
  feeId          String?         @db.ObjectId
  academicYear   AcademicYear?   @relation(fields: [academicYearId], references: [id])
  academicYearId String?         @db.ObjectId
  academicTerm   EAcademicTerm?
}

model AcademicYear {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  deletedAt         DateTime?
  name              String?
  current           Boolean            @default(false)
  fees              Fee[]
  studentPromotions StudentPromotion[]
  students          User[]
  payments          Payment[]
}

model Classroom {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
  name      String?
  school    School?   @relation(fields: [schoolId], references: [id])
  schoolId  String?   @db.ObjectId
  streams   Stream[]
  fees      Fee[]     @relation(fields: [feeIDs], references: [id])
  feeIDs    String[]  @db.ObjectId
}

model Stream {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  deletedAt         DateTime?
  name              String?
  classroom         Classroom?         @relation(fields: [classroomId], references: [id])
  classroomId       String?            @db.ObjectId
  studentPromotions StudentPromotion[]
  students          User[]
}

// TODO Review this model
model Fee {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
  deletedAt        DateTime?
  name             String?
  classrooms       Classroom[]       @relation(fields: [classroomIDs], references: [id])
  classroomIDs     String[]          @db.ObjectId
  academicYear     AcademicYear?     @relation(fields: [academicYearId], references: [id])
  academicYearId   String?           @db.ObjectId
  academicTerms    EAcademicTerm[]
  optional         Boolean           @default(false)
  type             EFeeType?
  amount           Float?
  studentExtraFees StudentExtraFee[]
  schoolId         String?           @db.ObjectId
  school           School?           @relation(fields: [schoolId], references: [id])
  payments         Payment[]
}

model StudentPromotion {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  deletedAt      DateTime?
  student        User?         @relation(fields: [studentId], references: [id])
  studentId      String?       @db.ObjectId
  stream         Stream?       @relation(fields: [streamId], references: [id])
  streamId       String?       @db.ObjectId
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId String?       @db.ObjectId
}

model StudentExtraFee {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
  student   User?     @relation(fields: [studentId], references: [id])
  studentId String?   @db.ObjectId
  fee       Fee?      @relation(fields: [feeId], references: [id])
  feeId     String?   @db.ObjectId
}

model EmployeeSalary {
  id         String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @default(now())
  current    Boolean           @default(true)
  date       DateTime
  from       DateTime?
  to         DateTime?
  amount     Float?
  name       EenumurationType?
  employee   User?             @relation(fields: [employeeId], references: [id])
  employeeId String?           @db.ObjectId
}

model Deductible {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @default(now())
  schoolId    String?           @db.ObjectId
  school      School?           @relation(fields: [schoolId], references: [id])
  optional    Boolean           @default(false)
  type        EDeductibleType?
  amount      Float?
  name        String?
  enumaration EenumurationType?
  deletedAt   DateTime?
}
