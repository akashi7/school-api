generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ERole {
  ADMIN
  STUDENT
  PARENT
  SCHOOL
}

enum EPaymentMethod {
  AIRTEL
  MTN
}

enum EAcademicTerm {
  TERM1
  TERM2
  TERM3
}

enum EFeeCategory {
  MANDATORY
  OPTIONAL
}

enum EGender {
  MALE
  FEMALE
}

enum ESchoolType {
  NURSERY
  PRIMARY
  SECONDARY
  TVET
  NURSERY_PRIMARY
  SECONDARY_TVET
  UNIVERSITY
}

model User {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now())
  deletedAt    DateTime?
  role         ERole     @default(STUDENT)
  refreshToken String?
  active       Boolean   @default(true)
  address      String?   @unique

  // STUDENT
  studentId          String?
  fullName           String?
  passportPhoto      String?
  dob                DateTime?
  gender             EGender?
  firstContactPhone  String?   @unique
  secondContactPhone String?   @unique

  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId String?       @db.ObjectId

  academicTerm EAcademicTerm?

  stream   Stream? @relation(fields: [streamId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  streamId String? @db.ObjectId

  schoolId String? @db.ObjectId
  school   User?   @relation("SchoolStudents", fields: [schoolId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  parentId String? @db.ObjectId
  parent   User?   @relation("ParentChildren", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  optionalFeeIDs String[]        @db.ObjectId
  optionalFees   AdditionalFee[] @relation(fields: [optionalFeeIDs], references: [id])

  studentPromotions StudentPromotion[]

  // SCHOOL
  schoolName    String?
  schoolTitle   String?
  schoolLogo    String?
  schoolType    ESchoolType?
  hasStudentIds Boolean?     @default(false)
  username      String?
  password      String?
  countryName   String?
  countryCode   String?

  students     User[]        @relation("SchoolStudents")
  feesReceived Transaction[] @relation("PayeeTransactions")
  classrooms   Classroom[]   @relation("SchoolClassrooms")

  // PARENT
  phone    String?       @unique
  children User[]        @relation("ParentChildren")
  feesPaid Transaction[] @relation("PayerTransactions")
}

model Transaction {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
  deletedAt     DateTime?
  referenceCode String
  paymentMethod EPaymentMethod
  payerId       String?        @db.ObjectId
  payer         User?          @relation("PayerTransactions", fields: [payerId], references: [id])
  payee         User?          @relation("PayeeTransactions", fields: [payeeId], references: [id])
  payeeId       String?        @db.ObjectId
  date          DateTime
  phoneNumber   String?
  amount        Float?
  reason        String?
}

model AcademicYear {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  deletedAt         DateTime?
  name              String?
  current           Boolean            @default(false)
  feeStructures     FeeStructure[]
  studentPromotions StudentPromotion[]
  additionalFees    AdditionalFee[]
  students          User[]
}

model Classroom {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())
  deletedAt      DateTime?
  name           String?
  school         User?           @relation("SchoolClassrooms", fields: [schoolId], references: [id])
  schoolId       String?         @db.ObjectId
  streams        Stream[]
  feeStructures  FeeStructure[]
  additionalFees AdditionalFee[]
}

model Stream {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now())
  deletedAt         DateTime?
  name              String?
  classroom         Classroom?         @relation(fields: [classroomId], references: [id])
  classroomId       String?            @db.ObjectId
  feeStructures     FeeStructure[]
  studentPromotions StudentPromotion[]
  students          User[]
}

model FeeStructure {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @default(now())
  deletedAt      DateTime?
  classroom      Classroom?     @relation(fields: [classroomId], references: [id])
  classroomId    String?        @db.ObjectId
  stream         Stream?        @relation(fields: [streamId], references: [id])
  streamId       String?        @db.ObjectId
  academicYear   AcademicYear?  @relation(fields: [academicYearId], references: [id])
  academicYearId String?        @db.ObjectId
  academicTerm   EAcademicTerm?
  amount         Float?
}

model StudentPromotion {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  deletedAt      DateTime?
  student        User?         @relation(fields: [studentId], references: [id])
  studentId      String?       @db.ObjectId
  stream         Stream?       @relation(fields: [streamId], references: [id])
  streamId       String?       @db.ObjectId
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])
  academicYearId String?       @db.ObjectId
}

model AdditionalFee {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now())
  deletedAt             DateTime?
  classroom             Classroom?     @relation(fields: [classroomId], references: [id])
  classroomId           String?        @db.ObjectId
  academicYear          AcademicYear?  @relation(fields: [academicYearId], references: [id])
  academicYearId        String?        @db.ObjectId
  feeName               String
  feeCategory           EFeeCategory?
  academicTerm          EAcademicTerm?
  amount                Float?
  optionalFeeStudentIDs String[]       @db.ObjectId
  optionalFeeStudents   User[]         @relation(fields: [optionalFeeStudentIDs], references: [id])
}
